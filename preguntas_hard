1_
Show all of the products grouped into unit_price groups.
Show the total amount of products in each unit_price group.
Order the list by the unit_price decending

Mostrar todos los productos agrupados en grupos de precios_unitarios.
Mostrar la cantidad total de productos en cada grupo de precios_unitarios.
Ordenar la lista por el precio_unitario en orden descendente.

CREATE VIEW product_price_groups AS
SELECT CONCAT("$",FLOOR(unit_price/10)*10+1," - $",FLOOR(unit_price/10)*10+10) AS price_group, COUNT(*) AS total_products
FROM products
GROUP BY FLOOR(unit_price/10)
ORDER BY price_group DESC;

2_
Show products_id, unit_price, units_in_stock, isOverstock from the product table.
Display isOverstock as a boolean 0 or 1.
Overstock is defined as units_in_stock($)/(unit_price(u)) >= 5.
unit_price is in units dolar.
units_in_stock is in units u.

Mostrar los productos_id, unit_price, units_in_stock y isOverstock de la tabla de productos.
Mostrar isOverstock como un booleano 0 o 1.
Overstock se define como units_in_stock ($) / (unit_price (u)) >= 5.
unit_price está en unidades de dólares.
units_in_stock está en unidades u.

CREATE VIEW product_info AS
SELECT product_id, unit_price, units_in_stock,
CASE WHEN units_in_stock / unit_price >= 5 THEN 1 ELSE 0 END AS isOverstock
FROM products;


3_
Show products_id, product_name, category_id, and supplier´s phone.
Show only the products who has 0 units_in_stock and the company_name first name is 'New Orleans Cajun Delights'

Mostrar products_id, product_name, category_id y el teléfono del proveedor.
Mostrar solo los productos que tienen 0 unidades en stock y el nombre de la compañía empieza por 'New Orleans Cajun Delights'


CREATE VIEW out_of_stock_products AS
SELECT p.product_id, p.product_name, p.category_id, s.phone
FROM products p
JOIN suppliers s ON p.supplier_id = s.supplier_id
WHERE p.units_in_stock = 0 AND s.company_name LIKE 'New Orleans Cajun Delights%';


4_
All customers who have orders, can see their orders tract on our site. Those customers are given a temporary password after their first order. Show the customer_id and temp_password.

The password must be the following, in order:
1. customer_id
2. the numerical length of customer's contact_name
3. the numerical length of customer's company_name

Todos los clientes que tienen pedidos, pueden ver el seguimiento de sus pedidos en nuestro sitio. A esos clientes se les otorga una contraseña temporal después de su primer pedido. Muestra el customer_id y temp_password.

La contraseña debe ser la siguiente, en orden:

customer_id
la longitud numérica del nombre de contacto del cliente
la longitud numérica del nombre de la empresa del cliente

CREATE VIEW orders_tracking_passwords AS
SELECT customers.customer_id, 
       CONCAT(customers.customer_id, LENGTH(customers.contact_name), LENGTH(customers.company_name)) AS temp_password
FROM customers
INNER JOIN orders ON customers.customer_id = orders.customer_id
WHERE orders.order_id IS NOT NULL;


5_
Show the contact name, company name, and phone number of the suppliers that still have stock of their products.

Mostrar el nombre de contacto, nombre de la compañía y número de teléfono de los proveedores que todavía tienen stock de sus productos.

CREATE VIEW suppliers_with_stock AS
SELECT s.contact_name, s.company_name, s.phone
FROM suppliers s
INNER JOIN products p ON s.supplier_id = p.supplier_id
WHERE p.units_in_stock > 0;

6_
Sort the territories names in ascending order in such a way that the province 'Boston' is always on top.

Ordena los nombres de los territorios en orden ascendente de tal manera que la provincia 'Boston' siempre aparezca en primer lugar.

CREATE VIEW sorted_territories AS
SELECT t.territory_id, t.territory_description
FROM territories t
ORDER BY
  CASE 
    WHEN t.territory_description LIKE '%Boston%' THEN 0
    ELSE 1
  END,
  t.territory_description ASC;


7_
For each day display the total amount of orders on that day. Display the amount changed from the previous date.
Para cada día, mostrar el total de pedidos realizados en ese día. Mostrar también la cantidad de pedidos que cambió en comparación con el día anterior.

CREATE VIEW daily_orders_total AS
SELECT 
  o.order_date AS order_day,
  COUNT(o.order_id) AS daily_orders,
  (
    SELECT COUNT(o2.order_id)
    FROM orders o2
    WHERE o2.order_date = DATE_SUB(o.order_date, INTERVAL 1 DAY)
  ) AS orders_previous_day,
  (
    COUNT(o.order_id) - 
    (
      SELECT COUNT(o2.order_id)
      FROM orders o2
      WHERE o2.order_date = DATE_SUB(o.order_date, INTERVAL 1 DAY)
    )
  ) AS orders_variation
FROM orders o
GROUP BY order_day;

8_
Show the percent of employees that have 'Mr' as their title of courtesy. Round the answer to the nearest  multiple of 10 number and in percent form.
Mostrar el porcentaje de empleados que tienen 'Mr' como titulo de cortesía. Redondear la respuesta lo más cerca de un número múltiplo de 10 y en forma de porcentaje.

CREATE VIEW percent_employees_mr AS
SELECT ROUND(COUNT(*) * 100.0 / (SELECT COUNT(*) FROM employees), -1) AS percent_mr_employees
FROM employees
WHERE title_of_courtesy LIKE '%Mr.%';

9_
Show the employees first_name and last_name, a "num_orders" column with a count of the orders taken, and a column called "Shipped" that displays "On Time" if the order shipped on time and "Late" if the order shipped late.
Order by employee last_name, then by first_name, and then descending by number of orders.
Mostrar el nombre y apellido del empleado, una columna "num_orders" con la cantidad de pedidos realizados, y una columna llamada "Shipped" que muestra "On Time" si el pedido se envió a tiempo y "Late" si se envió tarde.
Ordenar por apellido del empleado, luego por nombre, y luego en orden descendente por número de pedidos.

CREATE VIEW employee_order_info AS
SELECT
  e.first_name,
  e.last_name,
  COUNT(o.order_id) As num_orders,
  (
    CASE
      WHEN o.shipped_date < o.requiered_date THEN 'On Time'
      ELSE 'Late'
    END
  ) AS shipped
FROM orders o
  JOIN employees e ON e.employee_id = o.employee_id
GROUP BY
  e.first_name,
  e.last_name,
  shipped
ORDER BY
  e.last_name,
  e.first_name,
  num_orders DESC
