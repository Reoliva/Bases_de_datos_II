1_
Show all of the products grouped into unit_price groups.
Show the total amount of products in each unit_price group.
Order the list by the unit_price decending

CREATE VIEW product_price_groups AS
SELECT CONCAT("$",FLOOR(unit_price/10)*10+1," - $",FLOOR(unit_price/10)*10+10) AS price_group, COUNT(*) AS total_products
FROM products
GROUP BY FLOOR(unit_price/10)
ORDER BY price_group DESC;

2_
Show products_id, unit_price, units_in_stock, isOverstock from the product table.
Display isOverstock as a boolean 0 or 1.
Overstock is defined as units_in_stock($)/(unit_price(u)) >= 5.
unit_price is in units dolar.
units_in_stock is in units u.

CREATE VIEW product_info AS
SELECT product_id, unit_price, units_in_stock,
CASE WHEN units_in_stock / unit_price >= 5 THEN 1 ELSE 0 END AS isOverstock
FROM products;


3_
Show products_id, product_name, category_id, and supplier´s phone.
Show only the products who has 0 units_in_stock and the company_name first name is 'Exotic Liquids'

CREATE VIEW out_of_stock_products AS
SELECT p.product_id, p.product_name, p.category_id, s.phone
FROM products p
JOIN suppliers s ON p.supplier_id = s.supplier_id
WHERE p.units_in_stock = 0 AND s.company_name LIKE 'Exotic Liquids%';


4_
All customers who have orders, can see their orders tract on our site. Those customers are given a temporary password after their first order. Show the customer_id and temp_password.

The password must be the following, in order:
1. customer_id
2. the numerical length of customer's contact_name
3. the numerical length of customer's company_name

CREATE VIEW orders_tracking_passwords AS
SELECT customers.customer_id, 
       CONCAT(customers.customer_id, LENGTH(customers.contact_name), LENGTH(customers.company_name)) AS temp_password
FROM customers
INNER JOIN orders ON customers.customer_id = orders.customer_id
WHERE orders.order_id IS NOT NULL;


5_
Each shipp costs $20 for customers without amazon prime, and $5 for customers with amazon prime. All customers with an even customer_id have amazon prime.

Give each customer a 'Yes' if they have amazon prime, and a 'No' if they dont have amazon prime. Add up the shipp_total cost for each has_amazon_prime group.

CREATE VIEW shipping_info AS
SELECT 
    customer_id,
    CASE WHEN MOD(customer_id, 2) = 0 THEN 'Yes' ELSE 'No' END AS has_amazon_prime,
    CASE WHEN MOD(customer_id, 2) = 0 THEN 5 ELSE 20 END AS shipping_cost,
    SUM(CASE WHEN MOD(customer_id, 2) = 0 THEN 5 ELSE 20 END) OVER (PARTITION BY CASE WHEN MOD(customer_id, 2) = 0 THEN 'Yes' ELSE 'No' END) AS shipp_total
FROM orders;

6_
Sort the territories names in ascending order in such a way that the province 'Boston' is always on top.



7_
For each day display the total amount of orders on that day. Display the amount changed from the previous date.
CREATE VIEW daily_orders_total AS
SELECT 
  o.order_date AS order_day,
  COUNT(o.order_id) AS daily_orders,
  (
    SELECT COUNT(o2.order_id)
    FROM orders o2
    WHERE o2.order_date = DATE_SUB(o.order_date, INTERVAL 1 DAY)
  ) AS orders_previous_day,
  (
    COUNT(o.order_id) - 
    (
      SELECT COUNT(o2.order_id)
      FROM orders o2
      WHERE o2.order_date = DATE_SUB(o.order_date, INTERVAL 1 DAY)
    )
  ) AS orders_variation
FROM orders o
GROUP BY order_day;

8_
Show the percent of employees that have 'Mr' as their title of courtesy. Round the answer to the nearest  multiple of 10 number and in percent form.

CREATE VIEW percent_employees_mr AS
SELECT ROUND(COUNT(*) * 100.0 / (SELECT COUNT(*) FROM employees), -1) AS percent_mr_employees
FROM employees
WHERE title_of_courtesy LIKE '%Mr.%'

9_
Show the employees first_name and last_name, a "num_orders" column with a count of the orders taken, and a column called "Shipped" that displays "On Time" if the order shipped on time and "Late" if the order shipped late.
Order by employee last_name, then by first_name, and then descending by number of orders.
Mostrar el nombre y apellido del empleado, una columna "num_orders" con la cantidad de pedidos realizados, y una columna llamada "Shipped" que muestra "On Time" si el pedido se envió a tiempo y "Late" si se envió tarde.
Ordenar por apellido del empleado, luego por nombre, y luego en orden descendente por número de pedidos.

CREATE VIEW employee_order_info AS
SELECT
  e.first_name,
  e.last_name,
  COUNT(o.order_id) As num_orders,
  (
    CASE
      WHEN o.shipped_date < o.required_date THEN 'On Time'
      ELSE 'Late'
    END
  ) AS shipped
FROM orders o
  JOIN employees e ON e.employee_id = o.employee_id
GROUP BY
  e.first_name,
  e.last_name,
  shipped
ORDER BY
  e.last_name,
  e.first_name,
  num_orders DESC
